[
    {
        "name": "午",
        "type": "re",
        "while": {
            "succ": [],
            "fail": []
        },
        "cond": "(午安|中午好)[~。！，、…—\\-\\s!]*$",
        "succ": [],
        "fail": [
            "晚"
        ],
        "action": "if time_between(0,5):\n    lst=['（柚子正在甜甜地睡觉,没有回应）', '（只听到柚子轻轻的呼吸声,她还在梦乡中）', '（柚子在睡梦中翻了个身,继续安睡）', '（柚子的耳朵微微动了动,但她依然熟睡）', '唔...柚子还在睡觉呢 (揉眼睛)', '嗯...现在是午安时间吗? (迷迷糊糊)', '（柚子的尾巴轻轻摇了摇,但她没有醒来）', '呼...呼...(*ﾉωﾉ) 柚子还在睡觉呢...有什么事等天亮再说哦...','(￣ρ￣)..zZZ']\nelif time_between(5,11):\n    lst=['午安?现在才早上呢,柚子刚起床 (≧▽≦)', '早安才对啦~不过柚子也祝你午安哦 (◕‿◕♡)', '嘿嘿,现在说午安太早啦,柚子还没吃早餐呢 (￣▽￣)', '现在才早上哦,不过柚子也祝你午安啦 (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧', '午安?柚子的早餐还没吃完呢 (◎_◎;)', '现在说午安,是不是时差没调过来呀? (・_・ヾ','早安呀~(o^^o) 柚子刚起床,正在伸个懒腰呢。今天也要元气满满哦!']\nelif time_between(11,15):\n    lst=['午安午安~柚子刚吃完午饭呢 (≧∇≦)/', '午安!今天也要元气满满哦 (◕‿◕)♡', '午安啦~柚子正准备去午睡呢 (￣ω￣)', '午安!要不要和柚子一起午睡呀? (◠‿◠)', '午安~阳光正好,柚子想出去玩呢 (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧', '午安!柚子的肚子刚刚吃饱了呢 (≧◡≦)','午安!(~^▽^)~ 阳光正好,柚子正在看书呢。要不要一起来品尝下午茶?']\nelif time_between(15,19):\n    lst=['午安?现在已经下午啦,柚子正准备去玩呢 (≧∇≦)', '现在说午安有点晚哦~不过柚子也祝你午安啦 (◕ᴗ◕✿)', '嘿嘿,现在已经过了午安时间啦,柚子都吃过下午茶了 (￣▽￣)', '午安?柚子都准备吃晚饭了呢 (・∀・)', '现在说午安,是不是刚睡醒呀?柚子都玩了一下午啦 (◠‿◠)','下午好~(≧∇≦)/ 柚子刚吃完点心,准备出门散步了。要一起来吗?']\nelif time_between(19,24):\n    lst=['午安?现在都晚上啦,柚子准备睡觉了呢 (￣ω￣)', '这么晚还午安,是不是时差党呀? (◕ᴗ◕✿)', '晚安才对吧?不过柚子也祝你午安哦 (｡･ω･｡)', '现在说午安,柚子都不知道该不该去睡觉了呢 (￣▽￣)', '午安?柚子的尾巴都要睡着了呢 (≧ω≦)', '这个点说午安,是不是在地球另一边呀?柚子都准备睡觉啦 (⊙_⊙)?','晚上好呀~(⌒▽⌒) 夜晚的图书馆真安静呢。柚子在整理今天看的书,你有什么有趣的事要分享吗?']\ns = getran(lst)\nif cache.thismsg()['message']=='中午好':\n    s = s.replace('午安时间','中午').replace('午安','中午好')\ns.replace('$name',getname())"
    },
    {
        "name": "晚",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "午"
            ]
        },
        "cond": "{:cache.names}?晚.{0,3}$",
        "succ": [],
        "fail": [
            "mytest"
        ],
        "action": "if time_between(0,5):\n    lst=['晚安啦~柚子也要睡了 (￣o￣) zzZZ', '这么晚还没睡呀？柚子都困了呢 (´～｀)', '晚安晚安~做个好梦哦 (ᵔᴥᵔ)', '晚安啦~柚子要去梦游啦 (ﾉ≧∀≦)ﾉ', '这么晚还没睡呀？柚子的眼睛都要闭上了 (￣ρ￣)..zzZZ', '晚安晚安~柚子要去捉星星啦 (ノ￣ω￣)ノ', '熬夜啦？快睡吧 (￣o￣) zzZZ', '柚子也困了呢 (´～｀)', '一起做个好梦吧 (ᵔᴥᵔ)', '晚安~柚子也要去做个香甜的梦啦 (⁄ ⁄•⁄ω⁄•⁄ ⁄)', '这么晚还没睡呀？柚子陪你一起睡吧 (￣ρ￣)..zzZZ', '晚安晚安~要做个甜甜的梦哦 (づ｡◕‿‿◕｡)づ', '（柚子已经睡着了，没有回应）', '（柚子在梦中微笑，似乎听到了你的晚安）', '（柚子的尾巴轻轻摇了摇，但她依然熟睡）']\nelif time_between(5,11):\n    lst=['诶？现在就晚安了吗？柚子刚起床呢 (・_・;)', '是要睡回笼觉吗？柚子陪你一起！(≧∇≦)/', '这么早就晚安，是不是熬夜了呀？要好好休息哦 (◕‿◕)♡', '诶？现在就晚安了？柚子的早餐还没吃完呢 (◎_◎;)', '是要和太阳一起睡觉吗？柚子陪你！(≧∇≦)/', '这么早就晚安，难道是昨晚熬夜看书了？(◕‿◕✿)', '早安才对啦 (・_・;)', '是要睡回笼觉吗？(≧∇≦)/', '现在应该说早上好哦 (◕‿◕)♡', '晚安？柚子刚起床呢，是不是时差没调过来呀？(・_・ヾ', '这么早就晚安啦？柚子还想和你玩呢 (≧◡≦)', '现在说晚安，是不是打算睡一整天呀？(◕‿◕)♡']\nelif time_between(11,15):\n    lst=['现在说晚安，是不是困了呀？柚子陪你午睡！(◠‿◠)', '中午就晚安啦？柚子还想玩呢 (￣▽￣)', '午安还差不多啦~不过柚子也祝你晚安哦 (＾▽＾)', '现在说晚安，是不是困了呀？要不要和柚子一起午睡？(◠‿◠)', '中午就晚安啦？柚子还想出去玩呢 (￣▽￣)', '午安啦！(◠‿◠)', '现在是中午哦 (￣▽￣)', '要午睡吗？(＾▽＾)', '诶？现在就晚安了吗？柚子还想出去玩呢 (￣▽￣)', '中午就晚安？是不是累坏了呀？柚子陪你休息 (｡•́‿•̀｡)', '这个时候说晚安，柚子都不知道该不该陪你睡了 (・∀・)']\nelif time_between(15,19):\n    lst=['晚上好！柚子正准备去玩呢 (≧∇≦)/', '这个时候晚安有点早哦~不过柚子也祝你好梦 (◕ᴗ◕✿)', '晚上好呀！要一起吃晚饭吗？(・ω・)ノ', '还没到晚上呢 (≧∇≦)/', '现在是下午哦 (◕ᴗ◕✿)', '要不要一起吃晚饭？(・ω・)ノ', '晚上好~柚子正准备去吃好吃的呢 (≧∇≦)/', '现在说晚安有点早哦~不过柚子也祝你好梦 (◕ᴗ◕✿)', '晚上好！要不要一起看看星星呀？(✿◠‿◠)']\nelif time_between(19,24):\n    lst=['晚安啦！柚子也要去睡觉了 (￣ω￣)', '晚安~今天也要做个好梦哦 (｡･ω･｡)', '晚上好！柚子正准备睡觉呢，晚安啦 (≧▽≦)', '晚安啦！(￣ω￣)', '好梦哦～(｡･ω･｡)', '柚子也要睡啦，晚安 (≧▽≦)', '晚安啦！柚子也要去梳梳尾巴睡觉了 (￣ω￣)', '晚安~今天也要做个香香的美梦哦 (｡･ω･｡)', '晚上好！柚子正准备喝杯蜂蜜柚子茶呢，要一起吗？(≧▽≦)']\ngetran(lst).replace('$name',getname())"
    },
    {
        "name": "mytest",
        "type": "py",
        "while": {
            "succ": [],
            "fail": [
                "晚"
            ]
        },
        "cond": "msg=cache.thismsg()\nmsg.get('message')=='rua'",
        "succ": [
            "mytest2"
        ],
        "fail": [
            "百变小猫"
        ],
        "action": "print('rua!')"
    },
    {
        "name": "百变小猫",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "mytest"
            ]
        },
        "cond": "(|柚子|柚子，)(|我是|我也是)百变小猫$",
        "succ": [],
        "fail": [
            "iex"
        ],
        "action": "bbxm()"
    },
    {
        "name": "iex",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "百变小猫"
            ]
        },
        "cond": "\\.iex {Cmd}",
        "succ": [],
        "fail": [
            "vcs0"
        ],
        "action": "iex(\"\"\" {:Cmd} \"\"\".strip())"
    },
    {
        "name": "vcs0",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "iex"
            ]
        },
        "cond": "\\.vcs$",
        "succ": [],
        "fail": [
            "vcs"
        ],
        "action": "vcs()"
    },
    {
        "name": "vcs",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "vcs0"
            ]
        },
        "cond": "\\.vcs {Cmd}",
        "succ": [],
        "fail": [
            "bottles_guess"
        ],
        "action": "vcs(\"\"\" {:Cmd} \"\"\".strip())"
    },
    {
        "name": "bottles_guess",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "vcs"
            ]
        },
        "cond": "猜瓶子 {Lst}",
        "succ": [],
        "fail": [
            "bottles_init"
        ],
        "action": "bottles_guess('{:Lst}'.split())"
    },
    {
        "name": "bottles_init",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "bottles_guess"
            ]
        },
        "cond": "开始猜瓶子 {Lst}",
        "succ": [],
        "fail": [
            "？"
        ],
        "action": "bottles_init('{:Lst}'.split())"
    },
    {
        "name": "？",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "bottles_init"
            ]
        },
        "cond": "？",
        "succ": [],
        "fail": [
            "cs"
        ],
        "action": "'？' if random.random()>0.5 else None"
    },
    {
        "name": "cs",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "？"
            ]
        },
        "cond": "~{A}",
        "succ": [],
        "fail": [
            "狐狸叫"
        ],
        "action": "cs = mc.mc('cs.sch246.io',27016,'2333')\ncs.connect()\nresult = cs.send('''{:A}''')\nresult"
    },
    {
        "name": "狐狸叫",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "cs"
            ]
        },
        "cond": "嘤嘤嘤",
        "succ": [],
        "fail": [
            "ping"
        ],
        "action": "s='''嘤嘤嘤'''\ns"
    },
    {
        "name": "ping",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "狐狸叫"
            ]
        },
        "cond": "ping",
        "succ": [],
        "fail": [
            "chatend"
        ],
        "action": "s='''pong'''\ns"
    },
    {
        "name": "chatend",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "ping"
            ]
        },
        "cond": "柚子不聊了$",
        "succ": [],
        "fail": [
            "recall"
        ],
        "action": "chatting=True\nchat_context=[]\n'聊天结束'"
    },
    {
        "name": "recall",
        "type": "py",
        "while": {
            "succ": [],
            "fail": [
                "chatend"
            ]
        },
        "cond": "msg=cache.thismsg()\nis_notice(msg) and (is_group_recall(msg) or is_friend_recall(msg))",
        "succ": [],
        "fail": [
            "shownotice"
        ],
        "action": "recall_id = msg['message_id']\ngetlog().pop(find(getlog(),lambda m:is_msg(m) and m.get('message_id')==recall_id))"
    },
    {
        "name": "shownotice",
        "type": "py",
        "while": {
            "succ": [],
            "fail": [
                "recall"
            ]
        },
        "cond": "msg=cache.thismsg()\nget_shownotice() and is_notice(msg)",
        "succ": [],
        "fail": [
            "chatting"
        ],
        "action": "print(msg)"
    },
    {
        "name": "chatting",
        "type": "py",
        "while": {
            "succ": [],
            "fail": [
                "shownotice"
            ]
        },
        "cond": "data = getcmd('chat').cond()\ndata",
        "succ": [],
        "fail": [
            "chatstart"
        ],
        "action": "print(getcmd('chat').call(data))"
    },
    {
        "name": "chatstart",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "chatting"
            ]
        },
        "cond": "柚子聊聊天$",
        "succ": [],
        "fail": [
            "server"
        ],
        "action": "chatting=True\nchat_context=[]\n'聊天开始'"
    },
    {
        "name": "server",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "chatstart"
            ]
        },
        "cond": "% {Value}",
        "succ": [],
        "fail": [
            "2048_fast"
        ],
        "action": "s=server.call('''{:Value}''')\ns"
    },
    {
        "name": "2048_fast",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "server"
            ]
        },
        "cond": "\\.{arg:[wasd]}$",
        "succ": [],
        "fail": [
            "2048"
        ],
        "action": "run_action('2048',{**globals(),**locals()},{'arg':'{:arg}'})\n#"
    },
    {
        "name": "2048",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "2048_fast"
            ]
        },
        "cond": "\\.2048 {arg}",
        "succ": [],
        "fail": [
            "doge"
        ],
        "action": "if msgs.is_group_msg(cache.thismsg()):\n    store = getgroupstorage()\nelse:\n    store = getstorage()\nmat = store.get('mat')\narg='{:arg}'\nif arg=='start':\n    mat=[[0 for i in range(4)] for i in range(4)]\n    step_2048(mat)\nelif arg.startswith('start'):\n    n=int(arg[5:])\n    mat=[[0 for i in range(n)] for i in range(n)]\n    step_2048(mat)\nelif d2048.get(arg):\n    newmat=[list(line) for line in move_mat(mat,d2048[arg])]\n    if mat!=newmat:\n        step_2048(newmat)\n    mat=newmat\nstore['mat']=mat\nshow_mat(mat)"
    },
    {
        "name": "doge",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "2048"
            ]
        },
        "cond": "\\[CQ:face,id=277\\]",
        "succ": [],
        "fail": [
            "6"
        ],
        "action": "'''[CQ:image,file=147c01ec2bac5116c68c689447db3a30.image,url=https://c2cpicdw.qpic.cn/offpic_new/0/980001119-1936243186-147C01EC2BAC5116C68C689447DB3A30/0?term=3]'''"
    },
    {
        "name": "6",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "doge"
            ]
        },
        "cond": "6$",
        "succ": [],
        "fail": [
            "好耶"
        ],
        "action": "s = \"[CQ:image,file=89308ecdd1d3e9d2b879dfbf42042576.image,url=https://c2cpicdw.qpic.cn/offpic_new/980001119//980001119-4202816234-89308ECDD1D3E9D2B879DFBF42042576/0?term=3&is_origin=0]\"\nif cache.thismsg()['user_id'] in 准6:\n    s = None\ns"
    },
    {
        "name": "好耶",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "6"
            ]
        },
        "cond": "好耶",
        "succ": [],
        "fail": [
            "petpet2"
        ],
        "action": "\"[CQ:image,file=09ed942e277a0fb014b845399d38a5dc.image,subType=1,url=https://gchat.qpic.cn/gchatpic_new/1531412938/916083933-3043722186-09ED942E277A0FB014B845399D38A5DC/0?term=3&is_origin=0]\""
    },
    {
        "name": "petpet2",
        "type": "py",
        "while": {
            "succ": [],
            "fail": [
                "好耶"
            ]
        },
        "cond": "msg = cache.thismsg()\nreply_msg = {}\nif is_msg(msg):\n    text = msg['message'].strip()\n    if (text in list(petpet_dic.keys())+petpet_keys) and msg.get('reply'):\n        reply_id = cq.load(msg['reply']['reply'])['data']['id']\n        reply_msg = connect.call_api('get_msg',message_id=reply_id)['data']\nis_img(reply_msg)",
        "succ": [],
        "fail": [
            "yggktk"
        ],
        "action": "action = petpet_trans(text)\npic_url = cq.load(reply_msg['message'])['data']['url']\nsendmsg(petpet(key=action ,toAvatar=pic_url))"
    },
    {
        "name": "yggktk",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "petpet2"
            ]
        },
        "cond": "yggktk$",
        "succ": [],
        "fail": [
            "petpet"
        ],
        "action": "action='yggktk'\nuser_id = cache.thismsg()['user_id']\npetpet(key=action,toAvatar=headshot_url(user_id))"
    },
    {
        "name": "petpet",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "yggktk"
            ]
        },
        "cond": "{action:..?.?|[a-z_]+}{at:CQ_at('\\d+')}",
        "succ": [],
        "fail": [
            "reply"
        ],
        "action": "try:\n    action=petpet_trans('{:action}')\n    res = petpet(key=action,toAvatar=headshot_url(cq.load('{:at}')['data']['qq']))\nexcept:\n    res = None\nres"
    },
    {
        "name": "reply",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "petpet"
            ]
        },
        "cond": "\\.reply {name}\\s*\n{Key}\\s*\n###\\s*\n{Value}",
        "succ": [],
        "fail": [
            "restartmc"
        ],
        "action": "getcmd('link')._set2('{:name}', 're', '''{:Key}''', \"s='''{:Value}'''\\ns\")"
    },
    {
        "name": "restartmc",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "reply"
            ]
        },
        "cond": "柚子[，,]重启服务器",
        "succ": [],
        "fail": [
            "stopmc"
        ],
        "action": "restart_mc()"
    },
    {
        "name": "stopmc",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "restartmc"
            ]
        },
        "cond": "柚子[，,]关闭服务器",
        "succ": [],
        "fail": [
            "startmc"
        ],
        "action": "stop_mc()"
    },
    {
        "name": "startmc",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "stopmc"
            ]
        },
        "cond": "柚子[，,]启动服务器",
        "succ": [],
        "fail": [
            "真太阳时"
        ],
        "action": "start_mc()"
    },
    {
        "name": "真太阳时",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "startmc"
            ]
        },
        "cond": "\\.sun$",
        "succ": [],
        "fail": [
            "查询经纬"
        ],
        "action": "time.strftime('%H:%M:%S', 真太阳时(time.time(), getstorage()['经度']))"
    },
    {
        "name": "查询经纬",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "真太阳时"
            ]
        },
        "cond": "\\.jw$",
        "succ": [],
        "fail": [
            "经纬"
        ],
        "action": "f\"经纬度: {getstorage()['经度']} {getstorage()['纬度']}\""
    },
    {
        "name": "经纬",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "查询经纬"
            ]
        },
        "cond": "\\.jw {j} {w}",
        "succ": [],
        "fail": [
            "不可以",
            "设置城市"
        ],
        "action": "getstorage()['经度'] = {:j}\ngetstorage()['纬度'] = {:w}\n'设置经纬度: {:j} {:w}'"
    },
    {
        "name": "不可以",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "经纬"
            ]
        },
        "cond": "(不可以|禁止){a}{a}[!！]?$",
        "succ": [],
        "fail": [
            "柚子亲亲"
        ],
        "action": "'就要{:a}{:a}！'"
    },
    {
        "name": "柚子亲亲",
        "type": "re",
        "while": {
            "succ": [],
            "fail": []
        },
        "cond": "柚子亲亲",
        "succ": [],
        "fail": [
            "柚子憨憨"
        ],
        "action": "'噫呃'"
    },
    {
        "name": "柚子憨憨",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "柚子亲亲"
            ]
        },
        "cond": "柚子憨憨",
        "succ": [],
        "fail": [
            "r1d100"
        ],
        "action": "'啧'"
    },
    {
        "name": "r1d100",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "柚子憨憨"
            ]
        },
        "cond": "\\.r$",
        "succ": [],
        "fail": [
            "mc命令2"
        ],
        "action": "f'{getname()} 投了 1 个 100 面骰，总数为 {rd(1, 100)}'"
    },
    {
        "name": "mc命令2",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "r1d100"
            ]
        },
        "cond": "(\\\\\\\\){command:.*}",
        "succ": [],
        "fail": [
            "获取他人名字"
        ],
        "action": "'\\n'.join(map(lambda s:s[33:].strip(), screen.send('mc',\"\"\"{:command} \"\"\".strip()).splitlines()))"
    },
    {
        "name": "获取他人名字",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "mc命令2"
            ]
        },
        "cond": "{at:CQ}\\s*叫什么",
        "succ": [],
        "fail": [
            "答案之书"
        ],
        "action": "getname(int(cq.load('{:at}')['data']['qq']))"
    },
    {
        "name": "答案之书",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "获取他人名字"
            ]
        },
        "cond": "(柚子(告诉我|我该)怎么办|无所不知伟大的柚子啊，请为我指引吧！|为什么不问问神奇柚子呢|柚子柚子(告诉我)?)",
        "succ": [],
        "fail": [
            "mc命令"
        ],
        "action": "cmds.modules['answer'].run('')"
    },
    {
        "name": "mc命令",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "答案之书"
            ]
        },
        "cond": "\\\\{command:.*}",
        "succ": [],
        "fail": [
            "吗？"
        ],
        "action": "mc.send(\"\"\"{:command} \"\"\".strip()).strip()"
    },
    {
        "name": "吗？",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "mc命令"
            ]
        },
        "cond": "{:cache.names}[,，\\s]+{Text}",
        "succ": [],
        "fail": [
            "name加复读"
        ],
        "action": "msg=cache.thismsg()\nif not is_group_msg(msg) or msg.get('group_id') in chat_groups:\n    preset=[{'role': 'system', 'content':f'现在是{time.strftime(\"%Y年%m月%d日%H时%M分%S秒\")}'}]\n    call=preset+settings+[{\"role\": \"user\", \"content\": \"\"\"{:Text}\"\"\"}]\n    calls.put((msg_id(msg),call))\nelse:\n    ret ='''{:Text}'''.rstrip().rstrip('？').rstrip('?').rstrip('吗').replace('你',cache.nicknames[0]).replace('我','你')+'！'\nret"
    },
    {
        "name": "name加复读",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "吗？"
            ]
        },
        "cond": "{:cache.names}{a:[^？！~:;!\\?\\.]+}{b:[？！~:;!\\?\\.]}$",
        "succ": [],
        "fail": [
            "r1d6"
        ],
        "action": "f'{:a}{:b}'"
    },
    {
        "name": "r1d6",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "name加复读"
            ]
        },
        "cond": "\\.r{r:Int}d{d:Int}$",
        "succ": [],
        "fail": [
            "AA式复读"
        ],
        "action": "f'{getname()} 投了 {:r} 个 {:d} 面骰，总数为 {rd({:r}, {:d})}'"
    },
    {
        "name": "AA式复读",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "r1d6"
            ]
        },
        "cond": ".?{a:[^\\.\\?\\!？！\\s，。~0-9a-z]+}{a}.?$",
        "succ": [],
        "fail": [
            "被问好"
        ],
        "action": "'{:a}{:a}~'"
    },
    {
        "name": "被问好",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "AA式复读"
            ]
        },
        "cond": "你好[，, ]{:cache.names}.?$",
        "succ": [],
        "fail": [
            "call"
        ],
        "action": "getran(你也好).replace('$name',getname())"
    },
    {
        "name": "call",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "被问好"
            ]
        },
        "cond": "{:cache.names}$",
        "succ": [],
        "fail": [
            "getname"
        ],
        "action": "'我在'"
    },
    {
        "name": "getname",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "call"
            ]
        },
        "cond": "({:cache.names}[,，]?)?我叫什么$",
        "succ": [],
        "fail": [
            "setname"
        ],
        "action": "getname()"
    },
    {
        "name": "setname",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "getname"
            ]
        },
        "cond": "({:cache.names}[,，]?)?叫我{name:.*}",
        "succ": [],
        "fail": [
            "早"
        ],
        "action": "setname('{:name}')\n'你好，{:name}'"
    },
    {
        "name": "早",
        "type": "re",
        "while": {
            "succ": [],
            "fail": [
                "setname"
            ]
        },
        "cond": "{:cache.names}?早.{0,3}$",
        "succ": [],
        "fail": [],
        "action": "if time_between(0,5):\n    lst=['唔...柚子还想睡觉呢 (揉眼睛)', '这么早吗？柚子困困 (´ω｀)', '早安~不过柚子要再睡会儿 (≧▽≦)', '唔...还没天亮呢 (揉眼睛)', '柚子困困，再睡会儿 (´ω｀)', '这么早啊...晚安啦 (≧▽≦)', '呜哇~这么早呀？柚子还在做梦呢 (⊃｡•́‿•̀｡)⊃', '早安...不过柚子还想再睡会儿 (￣ρ￣)..zzZZ', '这个点说早安，柚子都不知道是早是晚了呢 (´,,•ω•,,)♡', '（柚子没有回应，因为她正在甜甜地睡觉）', '（只听到柚子均匀的呼吸声，她还在梦乡中）', '（柚子在睡梦中翻了个身，继续安睡）']\nelif time_between(5,11):\n    lst=['早安啊！今天也要元气满满哦 (≧∇≦)/', '早上好~柚子已经准备好开始新的一天啦！', '早安！今天也要开开心心的！(◕‿◕)♡', '早安啊！(≧∇≦)/', '早上好~阳光真好！', '早安！今天也要加油哦！(◕‿◕)♡', '哇！早安啊~柚子已经准备好冒险啦 (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧', '早安早安~今天也要元气满满哦！(๑•̀ㅂ•́)و✧', '早上好！柚子的耳朵都竖起来啦 (=^･ω･^=)', '早安啦！柚子已经准备好冒险啦 (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧', '早上好~今天也要开心哦！柚子陪你 (≧◡≦)', '早安！柚子已经偷吃了一个小蛋糕啦 (¬‿¬)']\nelif time_between(11,15):\n    lst=['诶？现在才早安吗？柚子都玩了好久啦 (￣▽￣)', '中午好才对吧？不过早安也行啦 (^_^)ノ', '午安午安~柚子肚子有点饿了呢 (・◇・)', '已经中午啦！(￣▽￣)', '午安才对吧？(^_^)ノ', '肚子饿了呢，该吃午饭啦 (・◇・)', '咦？现在才早安吗？柚子都吃过两顿甜点啦 (≧◡≦)', '午安才对吧~不过柚子也跟你说早安哦 (ノ≧∀≦)ノ', '这个点说早安，是不是梦游了呀？(◕‿◕✿)', '哎呀，现在才早安呀？柚子都玩累了呢 (￣▽￣)', '早安...不对，应该是午安才对吧？(・∀・)', '这个点说早安，是不是刚睡醒呀？柚子都吃过午饭啦 (◠‿◠)']\nelif time_between(15,19):\n    lst=['现在才起床吗？真是懒懒的呢 (≧▽≦)', '这个时候说早安，是不是睡过头啦？(◠‿◠)', '嘿嘿，现在才早安，柚子都准备吃晚饭了呢 (￣▽￣)', '现在才起床吗？(≧▽≦)', '下午好才对啦 (◠‿◠)', '该吃晚饭啦！(￣▽￣)', '诶？现在才起床吗？柚子都玩了一整天啦 (≧∇≦)', '早安？柚子觉得应该说晚上好才对呢 (￣ω￣)', '哇~这么晚才早安，一定是睡了个好觉吧？(◕ᴗ◕✿)']\nelif time_between(19,24):\n    lst=['诶？现在才说早安？柚子都准备睡觉了呢 (￣ω￣)', '这么晚还早安，是不是时差党呀？(◕ᴗ◕✿)', '晚安才对吧？不过柚子也祝你早安哦 (｡･ω･｡)', '都晚上啦，该说晚安啦 (￣ω￣)', '夜猫子起床啦？(◕ᴗ◕✿)', '柚子准备睡觉了哦 (｡･ω･｡)', '现在才早安？柚子的尾巴都要睡着了呢 (≧ω≦)', '嘻嘻，这么晚的早安，是在地球另一边吗？(◕‿◕♡)', '早安星星~柚子要准备睡觉了哦 (ᵔᴥᵔ)', '现在说早安，是不是穿越时空了呀？(⊙_⊙)？', '早安？柚子都准备睡觉了呢 (￣o￣) zzZZ', '这个点说早安，一定是在地球另一边吧？柚子要睡啦 (｡･ω･｡)']\ngetran(lst).replace('$name',getname())"
    },
    {
        "name": "设置城市",
        "type": null,
        "while": {
            "succ": [],
            "fail": [
                "经纬"
            ]
        },
        "cond": "\\.jw {city}",
        "succ": [],
        "fail": [],
        "action": "loc=geocode('{:city}')['location']\nlng = loc['lng']\nlat = loc['lat']\ngetstorage()['经度'] = lng\ngetstorage()['纬度'] = lat\nf'设置经纬度: {lng} {lat}'"
    },
    {
        "name": "mytest2",
        "type": "py",
        "while": {
            "succ": [
                "mytest"
            ],
            "fail": []
        },
        "cond": "msg.get('user_id')==980001119",
        "succ": [],
        "fail": [],
        "action": "print('AAAAAAAAAAAAAAA')"
    }
]